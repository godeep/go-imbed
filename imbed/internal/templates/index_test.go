// Code generated by go-imbed. DO NOT EDIT.

package templates

import (
	"encoding/base32"
	"encoding/binary"
	"hash/crc64"
	"testing"
	"math/rand"
	"os"
	"io/ioutil"
	"path/filepath"
	"bytes"
	"fmt"
)

var randomName = func() string {
	var buf [16]byte
	binary.LittleEndian.PutUint64(buf[:8], rand.Uint64())
	binary.LittleEndian.PutUint64(buf[8:], rand.Uint64())
	return b32Enc.EncodeToString(buf[:])
}()

var b32Enc = base32.NewEncoding("abcdefghijklmnopqrstuvwxyz234567").WithPadding(base32.NoPadding)

func getTag(data []byte) string {
	var crcBuf [8]byte
	binary.LittleEndian.PutUint64(crcBuf[:], crc64.Checksum(data, crc64.MakeTable(crc64.ECMA)))
	return b32Enc.EncodeToString(crcBuf[:])
}

func TestBytes(t *testing.T) {
	for n, a := range fidx {
		if getTag(a.Bytes()) != a.tag {
			t.Fatalf("checksum for asset %s doesn't match recorded", n)
		}
	}
}

func TestString(t *testing.T) {
	for n, a := range fidx {
		if getTag([]byte(a.String())) != a.tag {
			t.Fatalf("checksum for asset %s doesn't match recorded", n)
		}
	}
}
func TestWalkOpen(t *testing.T) {
	FS().Walk("", func(path string, info os.FileInfo, err error) error {
		if err != nil || info.IsDir() {
			return nil
		}
		asset := Get(path)
		if asset == nil {
			return fmt.Errorf("asset %s nout found", path)
		}
		if getTag(asset.Bytes()) != asset.tag {
			return fmt.Errorf("checksum for asset %s doesn't match recorded", path)
		}
		if getTag([]byte(asset.String())) != asset.tag {
			return fmt.Errorf("checksum for asset %s doesn't match recorded", path)
		}
		rdr := asset.Reader()
		data, err := ioutil.ReadAll(rdr)
		rdr.Close()
		if err != nil {
			return err
		}
		rdr, err = FS().Open(path)
		if err != nil {
			return err
		}
		data, err = ioutil.ReadAll(rdr)
		rdr.Close()
		if err != nil {
			return err
		}
		if getTag(data) != asset.tag {
			return fmt.Errorf("checksum for asset %s doesn't match recorded", path)
		}
		rdr.Close()
		return nil
	})
}

func rmtree(name string) {
	var files []string
	var dirs []string
	filepath.Walk(name, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return nil
		}
		if info.IsDir() {
			dirs = append(dirs, path)
		} else {
			files = append(files, path)
		}
		return nil
	})
	for j := len(files) - 1; j >= 0; j-- {
		os.Remove(files[j])
	}
	for j := len(dirs) - 1; j >= 0; j-- {
		os.Remove(dirs[j])
	}
}

func TestCopyTo(t *testing.T) {
	tmp, err := ioutil.TempDir(os.TempDir(), ".test-test")
	if err != nil {
		t.Fatal(err)
	}
	defer rmtree(tmp)
	// a whole tree
	if err = CopyTo(tmp, 0640, false); err != nil {
		t.Fatal(err)
	}
	var testDir  string
	var testFile string
	var testData []byte
	err = FS().Walk("", func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if info.IsDir() {
			if testDir == "" {
				testDir = path
			}
			return nil
		}
		f, err := os.OpenFile(filepath.Join(tmp, filepath.FromSlash(path)), os.O_RDONLY, 0)
		if err != nil {
			return err
		}
		data, err := ioutil.ReadAll(f)
		f.Close()
		if err != nil {
			return err
		}
		if testFile == "" {
			testFile = path
			testData = Must(path).Bytes()
		}
		if bytes.Compare(data, Must(path).Bytes()) != 0 {
			return fmt.Errorf("data differs for %s", path)
		}
		return nil
	})
	if err != nil {
		t.Fatal(err)
	}
	if testFile == "" {
		// an empty archive?
		return
	}
	// single file
	targetTestFile := filepath.Join(tmp, testFile)
	os.Remove(targetTestFile)
	if err = CopyTo(tmp, 0644, false, testFile); err != nil {
		t.Fatal(err)
	}
	f, err := os.OpenFile(targetTestFile, os.O_RDONLY, 0)
	if err != nil {
		t.Fatal(err)
	}
	data, err := ioutil.ReadAll(f)
	f.Close()
	if err != nil {
		t.Fatal(err)
	}
	if bytes.Compare(testData, data) != 0 {
		t.Fatalf("data differs for single file extract")
	}
	if err = CopyTo(tmp, 0644, false, testFile); err != nil {
		t.Fatalf("expected no error, got %v", err)
	}
	f, err = os.OpenFile(targetTestFile, os.O_WRONLY | os.O_APPEND, 0600)
	if err != nil {
		t.Fatal(err)
	}
	_, err = f.WriteString(randomName)
	f.Close()
	if err != nil {
		t.Fatal(err)
	}
	if err = CopyTo(tmp, 0644, false, testFile); err != os.ErrExist {
		t.Fatalf("expected os.ErrExist, got %v", err)
	}
	if err = CopyTo(tmp, 0644, true, testFile); err != nil {
		t.Fatal(err)
	}
	f, err = os.OpenFile(targetTestFile, os.O_RDONLY, 0)
	if err != nil {
		t.Fatal(err)
	}
	data, err = ioutil.ReadAll(f)
	f.Close()
	if err != nil {
		t.Fatal(err)
	}
	if bytes.Compare(testData, data) != 0 {
		t.Fatalf("data differs for single file extract")
	}
	os.Remove(targetTestFile)
	if testDir == "" {
		// no directories in archive
		return
	}
	targetTestFile = filepath.Join(tmp, randomName)
	if err = CopyTo(targetTestFile, 0644, false, testDir); err != nil {
		t.Fatal(err)
	}
	err = FS().Walk(testDir, func(path string, info os.FileInfo, err error) error {
		if err != nil || info.IsDir() {
			return err
		}
		testData := Must(path).Bytes()
		f, err := os.OpenFile(filepath.Join(targetTestFile, filepath.FromSlash(path)), os.O_RDONLY, 0)
		if err != nil {
			return err
		}
		data, err := ioutil.ReadAll(f)
		f.Close()
		if err != nil {
			return err
		}
		if bytes.Compare(data, testData) != 0 {
			return fmt.Errorf("trees differ after partial extract")
		}
		return nil
	})
	if err != nil {
		t.Fatal(err)
	}
}